from PyQt5.QtWidgets import (QWidget, QMessageBox, QDialog, QVBoxLayout, 
                              QHBoxLayout, QLabel, QLineEdit, QPushButton, 
                              QComboBox, QTableWidgetItem, QHeaderView, QInputDialog)
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QIcon, QFont
import sys
import os

# Import UI v√† database
from ui.pages.user_management_ui import Ui_Form
from database.db_manager import db

class AddUserDialog(QDialog):
    """Dialog th√™m/s·ª≠a ng∆∞·ªùi d√πng"""
    def __init__(self, parent=None, user_data=None):
        super(AddUserDialog, self).__init__(parent)
        self.user_data = user_data  # None = th√™m m·ªõi, c√≥ data = s·ª≠a
        self.setupUI()
        
        if user_data:
            self.setWindowTitle("‚úèÔ∏è S·ª≠a ng∆∞·ªùi d√πng")
            self.populate_fields()
        else:
            self.setWindowTitle("‚ûï Th√™m ng∆∞·ªùi d√πng m·ªõi")
    
    def setupUI(self):
        self.setFixedSize(450, 400)
        layout = QVBoxLayout(self)
        
        # Username
        layout.addWidget(QLabel("üë§ T√™n ƒëƒÉng nh·∫≠p:"))
        self.username_edit = QLineEdit()
        layout.addWidget(self.username_edit)
        
        # Password (ch·ªâ hi·ªán khi th√™m m·ªõi)
        if not self.user_data:
            layout.addWidget(QLabel("üîí M·∫≠t kh·∫©u:"))
            self.password_edit = QLineEdit()
            self.password_edit.setEchoMode(QLineEdit.Password)
            layout.addWidget(self.password_edit)
        
        # Full Name
        layout.addWidget(QLabel("üë®‚Äçüíº H·ªç t√™n ƒë·∫ßy ƒë·ªß:"))
        self.full_name_edit = QLineEdit()
        layout.addWidget(self.full_name_edit)
        
        # Phone Number
        layout.addWidget(QLabel("üì± S·ªë ƒëi·ªán tho·∫°i:"))
        self.phone_edit = QLineEdit()
        layout.addWidget(self.phone_edit)
        
        # Email
        layout.addWidget(QLabel("üìß Email:"))
        self.email_edit = QLineEdit()
        layout.addWidget(self.email_edit)
        
        # Role
        layout.addWidget(QLabel("üé≠ Vai tr√≤:"))
        self.role_combo = QComboBox()
        self.role_combo.addItems(["ANALYST", "ADMIN"])
        layout.addWidget(self.role_combo)
        
        # Buttons
        button_layout = QHBoxLayout()
        
        self.save_btn = QPushButton("üíæ L∆∞u")
        self.save_btn.clicked.connect(self.save_user)
        
        self.cancel_btn = QPushButton("‚ùå H·ªßy")
        self.cancel_btn.clicked.connect(self.reject)
        
        button_layout.addWidget(self.save_btn)
        button_layout.addWidget(self.cancel_btn)
        layout.addLayout(button_layout)
    
    def populate_fields(self):
        """Fill fields khi s·ª≠a user"""
        if self.user_data:
            self.username_edit.setText(self.user_data.get('username', ''))
            self.full_name_edit.setText(self.user_data.get('full_name', ''))
            self.phone_edit.setText(self.user_data.get('phone_number', ''))
            self.email_edit.setText(self.user_data.get('email', ''))
            role = self.user_data.get('role', 'ANALYST')
            index = self.role_combo.findText(role)
            if index >= 0:
                self.role_combo.setCurrentIndex(index)
    
    def save_user(self):
        username = self.username_edit.text().strip()
        full_name = self.full_name_edit.text().strip()
        phone_number = self.phone_edit.text().strip()
        email = self.email_edit.text().strip()
        role = self.role_combo.currentText()
        
        # Validation
        if not username:
            QMessageBox.warning(self, "L·ªói", "T√™n ƒëƒÉng nh·∫≠p kh√¥ng ƒë∆∞·ª£c r·ªóng!")
            return
        
        # N·∫øu kh√¥ng c√≥ full_name, d√πng username
        if not full_name:
            full_name = username
        
        try:
            if not db.connection:
                if not db.connect():
                    QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ k·∫øt n·ªëi database!")
                    return
            
            if self.user_data:  # S·ª≠a user
                # C·∫≠p nh·∫≠t th√¥ng tin user (kh√¥ng c√≥ update full_name v√† phone trong h√†m update_user c≈©)
                # C·∫ßn s·ª≠a h√†m update_user ho·∫∑c d√πng query tr·ª±c ti·∫øp
                query = """
                    UPDATE Users 
                    SET username=?, full_name=?, phone_number=?, email=?, role=? 
                    WHERE user_id=?
                """
                cursor = db.execute_query(query, (username, full_name, phone_number, email, role, self.user_data['user_id']))
                success = cursor is not None
                message = "C·∫≠p nh·∫≠t user th√†nh c√¥ng!" if success else "C√≥ l·ªói khi c·∫≠p nh·∫≠t user!"
            else:  # Th√™m user m·ªõi
                password = self.password_edit.text().strip()
                if not password:
                    QMessageBox.warning(self, "L·ªói", "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c r·ªóng!")
                    return
                
                success = db.create_user(username, password, email, role, full_name, phone_number)
                message = "T·∫°o user th√†nh c√¥ng!" if success else "C√≥ l·ªói khi t·∫°o user!"
            
            if success:
                QMessageBox.information(self, "Th√†nh c√¥ng", message)
                self.accept()
            else:
                QMessageBox.warning(self, "L·ªói", message)
                
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"C√≥ l·ªói x·∫£y ra: {str(e)}")

class UserManagement(QWidget):
    def __init__(self):
        super(UserManagement, self).__init__()
        self.ui = Ui_Form()
        self.ui.setupUi(self)
        
        # Get current user info
        self.current_user = self.get_current_user()
        
        # Connect database
        self.connect_database()
        
        # Setup UI
        self.setup_table()
        self.connect_signals()
        
        # Check permissions
        self.check_permissions()
        
        # Load data
        self.load_users()
        
        # Setup search timer (ƒë·ªÉ tr√°nh search li√™n t·ª•c khi typing)
        self.search_timer = QTimer()
        self.search_timer.timeout.connect(self.filter_users)
        self.search_timer.setSingleShot(True)
    
    def get_current_user(self):
        """L·∫•y th√¥ng tin user hi·ªán t·∫°i t·ª´ main window"""
        try:
            # T√¨m main window
            from PyQt5.QtWidgets import QApplication
            app = QApplication.instance()
            
            # T√¨m login window ƒë·ªÉ l·∫•y logged_in_user
            for widget in app.allWidgets():
                if hasattr(widget, 'logged_in_user') and widget.logged_in_user:
                    return widget.logged_in_user
                    
            # Fallback: assume admin for now
            return {'role': 'ADMIN', 'username': 'admin'}
        except:
            # Default to admin for safety
            return {'role': 'ADMIN', 'username': 'admin'}
    
    def check_permissions(self):
        """Ki·ªÉm tra quy·ªÅn truy c·∫≠p User Management"""
        if not self.current_user or self.current_user.get('role') != 'ADMIN':
            # Disable t·∫•t c·∫£ ch·ª©c nƒÉng n·∫øu kh√¥ng ph·∫£i admin
            if hasattr(self.ui, 'addUserBtn'):
                self.ui.addUserBtn.setEnabled(False)
                self.ui.addUserBtn.setToolTip("Ch·ªâ Admin m·ªõi c√≥ quy·ªÅn th√™m ng∆∞·ªùi d√πng")
            
            if hasattr(self.ui, 'editUserBtn'):
                self.ui.editUserBtn.setEnabled(False)
                self.ui.editUserBtn.setToolTip("Ch·ªâ Admin m·ªõi c√≥ quy·ªÅn s·ª≠a th√¥ng tin ng∆∞·ªùi d√πng")
            
            if hasattr(self.ui, 'deleteUserBtn'):
                self.ui.deleteUserBtn.setEnabled(False)
                self.ui.deleteUserBtn.setToolTip("Ch·ªâ Admin m·ªõi c√≥ quy·ªÅn x√≥a ng∆∞·ªùi d√πng")
            
            if hasattr(self.ui, 'toggleStatusBtn'):
                self.ui.toggleStatusBtn.setEnabled(False)
                self.ui.toggleStatusBtn.setToolTip("Ch·ªâ Admin m·ªõi c√≥ quy·ªÅn thay ƒë·ªïi tr·∫°ng th√°i ng∆∞·ªùi d√πng")
            
        else:
            self.update_status("‚úÖ Admin c√≥ ƒë·∫ßy ƒë·ªß quy·ªÅn qu·∫£n l√Ω ng∆∞·ªùi d√πng")
            return True
    
    def connect_database(self):
        """K·∫øt n·ªëi database"""
        try:
            if not db.connection:
                if not db.connect():
                    QMessageBox.critical(self, "L·ªói Database", "Kh√¥ng th·ªÉ k·∫øt n·ªëi database!")
                    return False
            return True
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"L·ªói k·∫øt n·ªëi database: {str(e)}")
            return False
    
    def setup_table(self):
        """Thi·∫øt l·∫≠p b·∫£ng users"""
        # Ch·ªâ hi·ªÉn th·ªã khi c√≥ UI elements (tr√°nh l·ªói khi UI ch∆∞a c√≥ table)
        if hasattr(self.ui, 'usersTable'):
            # ·∫®n c·ªôt ID 
            self.ui.usersTable.setColumnHidden(0, True)
            
            # Set column widths
            header = self.ui.usersTable.horizontalHeader()
            header.setStretchLastSection(True)
            
            # Set selection behavior
            self.ui.usersTable.setSelectionBehavior(self.ui.usersTable.SelectRows)
    
    def connect_signals(self):
        """K·∫øt n·ªëi signals v·ªõi slots"""
        # N·∫øu UI ch∆∞a c√≥ c√°c elements, t·∫°m th·ªùi skip
        if hasattr(self.ui, 'addUserBtn'):
            self.ui.addUserBtn.clicked.connect(self.add_user)
        
        if hasattr(self.ui, 'editUserBtn'):
            self.ui.editUserBtn.clicked.connect(self.edit_user)
        
        if hasattr(self.ui, 'deleteUserBtn'):
            self.ui.deleteUserBtn.clicked.connect(self.delete_user)
        
        if hasattr(self.ui, 'toggleStatusBtn'):
            self.ui.toggleStatusBtn.clicked.connect(self.toggle_user_status)
        
        if hasattr(self.ui, 'refreshBtn'):
            self.ui.refreshBtn.clicked.connect(self.load_users)
        
        if hasattr(self.ui, 'searchEdit'):
            self.ui.searchEdit.textChanged.connect(self.on_search_changed)
        
        if hasattr(self.ui, 'usersTable'):
            self.ui.usersTable.itemSelectionChanged.connect(self.on_selection_changed)
    
    def load_users(self):
        """Load danh s√°ch users t·ª´ database"""
        try:
            if not self.connect_database():
                return
            
            users = db.get_users()
            self.populate_table(users)
            self.update_statistics(users)
            self.update_status("ƒê√£ t·∫£i danh s√°ch ng∆∞·ªùi d√πng")
            
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch users: {str(e)}")
    
    def populate_table(self, users):
        """Fill data v√†o table"""
        if not hasattr(self.ui, 'usersTable'):
            return
            
        self.ui.usersTable.setRowCount(len(users))
        
        for row, user in enumerate(users):
            # ID (·∫©n)
            self.ui.usersTable.setItem(row, 0, QTableWidgetItem(str(user['user_id'])))
            
            # Username (hi·ªÉn th·ªã full_name n·∫øu c√≥)
            display_name = user.get('full_name', '') or user['username']
            self.ui.usersTable.setItem(row, 1, QTableWidgetItem(f"{display_name} ({user['username']})"))
            
            # Email
            email = user.get('email', '') or 'N/A'
            self.ui.usersTable.setItem(row, 2, QTableWidgetItem(email))
            
            # Role
            role = user['role']
            role_icon = "üëë" if role == "ADMIN" else "üîç"
            self.ui.usersTable.setItem(row, 3, QTableWidgetItem(f"{role_icon} {role}"))
            
            # Created date
            created_at = user.get('created_at', '')
            if created_at:
                # Format ng√†y ƒë·∫πp h∆°n
                try:
                    from datetime import datetime
                    dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                    formatted_date = dt.strftime("%d/%m/%Y")
                except:
                    formatted_date = created_at[:10] if len(created_at) >= 10 else "N/A"
            else:
                formatted_date = "N/A"
            self.ui.usersTable.setItem(row, 4, QTableWidgetItem(formatted_date))
            
            # Status
            status = "üü¢ Ho·∫°t ƒë·ªông" if user['is_active'] else "üî¥ Kh√¥ng ho·∫°t ƒë·ªông"
            self.ui.usersTable.setItem(row, 5, QTableWidgetItem(status))
    
    def update_statistics(self, users):
        """C·∫≠p nh·∫≠t th·ªëng k√™"""
        total = len(users)
        active = len([u for u in users if u['is_active']])
        inactive = total - active
        admin = len([u for u in users if u['role'] == 'ADMIN'])
        analyst = len([u for u in users if u['role'] == 'ANALYST'])
        
        if hasattr(self.ui, 'statsLabel'):
            self.ui.statsLabel.setText(f"üìä T·ªïng: {total} users")
        
        if hasattr(self.ui, 'activeUsersLabel'):
            self.ui.activeUsersLabel.setText(f"üü¢ Ho·∫°t ƒë·ªông: {active}")
        
        if hasattr(self.ui, 'inactiveUsersLabel'):
            self.ui.inactiveUsersLabel.setText(f"üî¥ Kh√¥ng ho·∫°t ƒë·ªông: {inactive}")
        
        if hasattr(self.ui, 'adminUsersLabel'):
            self.ui.adminUsersLabel.setText(f"üëë Admin: {admin}")
        
        if hasattr(self.ui, 'analystUsersLabel'):
            self.ui.analystUsersLabel.setText(f"üîç Analyst: {analyst}")
    
    def update_status(self, message):
        """C·∫≠p nh·∫≠t status bar"""
        if hasattr(self.ui, 'statusLabel'):
            self.ui.statusLabel.setText(message)
    
    def on_selection_changed(self):
        """X·ª≠ l√Ω khi selection thay ƒë·ªïi"""
        if not hasattr(self.ui, 'usersTable'):
            return
            
        has_selection = len(self.ui.usersTable.selectedItems()) > 0
        is_admin = self.current_user and self.current_user.get('role') == 'ADMIN'
        
        # Ch·ªâ enable buttons n·∫øu c√≥ selection v√† l√† admin
        if hasattr(self.ui, 'editUserBtn'):
            self.ui.editUserBtn.setEnabled(has_selection and is_admin)
        
        if hasattr(self.ui, 'deleteUserBtn'):
            self.ui.deleteUserBtn.setEnabled(has_selection and is_admin)
        
        if hasattr(self.ui, 'toggleStatusBtn'):
            self.ui.toggleStatusBtn.setEnabled(has_selection and is_admin)
    
    def get_selected_user(self):
        """L·∫•y user ƒë∆∞·ª£c ch·ªçn"""
        if not hasattr(self.ui, 'usersTable'):
            return None
            
        selected_rows = set()
        for item in self.ui.usersTable.selectedItems():
            selected_rows.add(item.row())
        
        if not selected_rows:
            return None
        
        row = list(selected_rows)[0]
        user_id = int(self.ui.usersTable.item(row, 0).text())
        
        # L·∫•y th√¥ng tin ƒë·∫ßy ƒë·ªß t·ª´ database thay v√¨ t·ª´ table
        try:
            if not self.connect_database():
                return None
            
            user = db.fetch_one("SELECT user_id, username, full_name, phone_number, email, role FROM Users WHERE user_id = ?", (user_id,))
            return user
        except Exception as e:
            print(f"Error getting user info: {e}")
            return None
    
    def add_user(self):
        """Th√™m user m·ªõi"""
        dialog = AddUserDialog(self)
        if dialog.exec_() == QDialog.Accepted:
            self.load_users()
    
    def edit_user(self):
        """S·ª≠a user"""
        user = self.get_selected_user()
        if not user:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng ch·ªçn user ƒë·ªÉ s·ª≠a!")
            return
        
        dialog = AddUserDialog(self, user)
        if dialog.exec_() == QDialog.Accepted:
            self.load_users()
    
    def delete_user(self):
        """X√≥a vƒ©nh vi·ªÖn user kh·ªèi h·ªá th·ªëng"""
        user = self.get_selected_user()
        if not user:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng ch·ªçn user ƒë·ªÉ x√≥a!")
            return
        
        # Ki·ªÉm tra quy·ªÅn admin
        if not self.current_user or self.current_user.get('role') != 'ADMIN':
            QMessageBox.warning(self, "üîí Quy·ªÅn truy c·∫≠p", "Ch·ªâ Admin m·ªõi c√≥ quy·ªÅn x√≥a ng∆∞·ªùi d√πng!")
            return
        
        # Kh√¥ng cho ph√©p x√≥a ch√≠nh m√¨nh
        if user['username'] == self.current_user.get('username'):
            QMessageBox.warning(
                self, 
                "‚ùå Kh√¥ng th·ªÉ x√≥a", 
                "B·∫°n kh√¥ng th·ªÉ x√≥a ch√≠nh t√†i kho·∫£n c·ªßa m√¨nh!\n\n"
                "Vui l√≤ng s·ª≠ d·ª•ng t√†i kho·∫£n admin kh√°c ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y."
            )
            return
        
        # Ki·ªÉm tra n·∫øu user ƒëang ho·∫°t ƒë·ªông - g·ª£i √Ω d√πng toggle status
        if user.get('is_active', True):
            QMessageBox.information(
                self,
                "üí° G·ª£i √Ω",
                f"User '{user['username']}' ƒëang ·ªü tr·∫°ng th√°i ho·∫°t ƒë·ªông.\n\n"
                f"üí° G·ª¢I √ù: N·∫øu b·∫°n ch·ªâ mu·ªën ngƒÉn user ƒëƒÉng nh·∫≠p,\n"
                f"h√£y s·ª≠ d·ª•ng n√∫t 'üîÑ ƒê·ªïi tr·∫°ng th√°i' thay v√¨ x√≥a vƒ©nh vi·ªÖn.\n\n"
                f"üóëÔ∏è N√∫t 'X√≥a' s·∫Ω X√ìA Vƒ®NH VI·ªÑN user kh·ªèi h·ªá th·ªëng."
            )
        
        # Hi·ªÉn th·ªã dialog x√°c nh·∫≠n x√≥a vƒ©nh vi·ªÖn
        delete_dialog = DeleteTypeDialog(self, user)
        
        if delete_dialog.exec_() == QDialog.Accepted:
            if delete_dialog.is_confirmed():
                self.perform_hard_delete(user)
            else:
                QMessageBox.information(self, "Th√¥ng b√°o", "B·∫°n ƒë√£ h·ªßy x√≥a vƒ©nh vi·ªÖn user.")
    
    def perform_hard_delete(self, user):
        """Th·ª±c hi·ªán hard delete v·ªõi ki·ªÉm tra b·ªï sung"""
        try:
            if not self.connect_database():
                return
            
            # Ki·ªÉm tra d·ªØ li·ªáu s·∫Ω b·ªã m·∫•t
            activity_count = db.fetch_one("SELECT COUNT(*) as count FROM Activity_Logs WHERE user_id = ?", (user['user_id'],))
            case_count = db.fetch_one("SELECT COUNT(*) as count FROM Case_Assignees WHERE user_id = ?", (user['user_id'],))
            
            # NgƒÉn ch·∫∑n x√≥a n·∫øu ƒëang c√≥ case assignments
            if case_count and case_count['count'] > 0:
                QMessageBox.critical(
                    self,
                    "‚ùå Kh√¥ng th·ªÉ x√≥a vƒ©nh vi·ªÖn",
                    f"User '{user['username']}' ƒëang ƒë∆∞·ª£c g√°n v√†o {case_count['count']} case(s)!\n\n"
                    f"üîß Vui l√≤ng:\n"
                    f"1. Remove user kh·ªèi t·∫•t c·∫£ cases tr∆∞·ªõc\n"
                    f"2. Ho·∫∑c ch·ªçn 'üîÑ ƒê·ªïi tr·∫°ng th√°i' ƒë·ªÉ v√¥ hi·ªáu h√≥a thay v√¨ x√≥a vƒ©nh vi·ªÖn"
                )
                return
            
            # Th·ª±c hi·ªán hard delete
            success = db.hard_delete_user(user['user_id'])
            
            if success:
                # Th√¥ng b√°o th√†nh c√¥ng v·ªõi th·ªëng k√™
                success_msg = f"üíÄ ƒê√£ X√ìA Vƒ®NH VI·ªÑN user '{user['username']}'!\n\n"
                success_msg += f"üóëÔ∏è User ƒë√£ b·ªã x√≥a ho√†n to√†n kh·ªèi h·ªá th·ªëng.\n"
                
                if activity_count and activity_count['count'] > 0:
                    success_msg += f"üìù {activity_count['count']} activity logs ƒë√£ b·ªã x√≥a vƒ©nh vi·ªÖn.\n"
                else:
                    success_msg += f"üìù Kh√¥ng c√≥ activity logs n√†o b·ªã m·∫•t.\n"
                    
                success_msg += f"\n‚ö†Ô∏è Thao t√°c ƒë√£ ho√†n t·∫•t v√† kh√¥ng th·ªÉ ho√†n t√°c."
                
                QMessageBox.information(self, "üíÄ X√≥a vƒ©nh vi·ªÖn th√†nh c√¥ng", success_msg)
                self.load_users()  # Refresh table
            else:
                QMessageBox.critical(
                    self, 
                    "‚ùå Hard delete th·∫•t b·∫°i", 
                    f"C√≥ l·ªói nghi√™m tr·ªçng khi x√≥a vƒ©nh vi·ªÖn user '{user['username']}'!\n\n"
                    f"üîç Nguy√™n nh√¢n c√≥ th·ªÉ:\n"
                    f"‚Ä¢ User l√† admin cu·ªëi c√πng trong h·ªá th·ªëng\n"
                    f"‚Ä¢ C√≥ r√†ng bu·ªôc d·ªØ li·ªáu ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω\n"
                    f"‚Ä¢ L·ªói k·∫øt n·ªëi database"
                )
                
        except Exception as e:
            QMessageBox.critical(
                self, 
                "‚ùå L·ªói nghi√™m tr·ªçng", 
                f"C√≥ l·ªói nghi√™m tr·ªçng khi x√≥a vƒ©nh vi·ªÖn user:\n{str(e)}\n\n"
                f"üõ°Ô∏è H·ªá th·ªëng ƒë√£ d·ª´ng thao t√°c ƒë·ªÉ b·∫£o v·ªá d·ªØ li·ªáu."
            )
    
    def toggle_user_status(self):
        """ƒê·ªïi tr·∫°ng th√°i user"""
        user = self.get_selected_user()
        if not user:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng ch·ªçn user ƒë·ªÉ thay ƒë·ªïi tr·∫°ng th√°i!")
            return
        
        try:
            if not self.connect_database():
                return
            
            # Get current status t·ª´ database
            db_user = db.fetch_one("SELECT is_active FROM Users WHERE user_id = ?", (user['user_id'],))
            if not db_user:
                QMessageBox.warning(self, "L·ªói", "Kh√¥ng t√¨m th·∫•y user trong database!")
                return
            
            new_status = not db_user['is_active']
            success = db.update_user(user['user_id'], is_active=new_status)
            
            if success:
                status_text = "k√≠ch ho·∫°t" if new_status else "v√¥ hi·ªáu h√≥a"
                QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ {status_text} user '{user['username']}'")
                self.load_users()
            else:
                QMessageBox.warning(self, "L·ªói", "C√≥ l·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i user!")
                
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"C√≥ l·ªói x·∫£y ra: {str(e)}")
    
    def on_search_changed(self):
        """X·ª≠ l√Ω khi search text thay ƒë·ªïi"""
        self.search_timer.stop()
        self.search_timer.start(500)  # Delay 500ms
    
    def filter_users(self):
        """L·ªçc users theo search term"""
        if not hasattr(self.ui, 'searchEdit') or not hasattr(self.ui, 'usersTable'):
            return
        
        search_text = self.ui.searchEdit.text().lower()
        
        for row in range(self.ui.usersTable.rowCount()):
            show_row = False
            
            # T√¨m trong username (c·ªôt 1) v√† email (c·ªôt 2)
            for col in [1, 2]:  # Username/Full_name v√† Email columns
                item = self.ui.usersTable.item(row, col)
                if item and search_text in item.text().lower():
                    show_row = True
                    break
            
            self.ui.usersTable.setRowHidden(row, not show_row)

class DeleteTypeDialog(QDialog):
    """Dialog x√°c nh·∫≠n x√≥a vƒ©nh vi·ªÖn ng∆∞·ªùi d√πng"""
    
    def __init__(self, parent=None, user_info=None):
        super(DeleteTypeDialog, self).__init__(parent)
        self.user_info = user_info or {}
        self.confirmed = False
        
        self.setWindowTitle("üíÄ X√°c nh·∫≠n x√≥a vƒ©nh vi·ªÖn")
        self.setFixedSize(500, 450)
        self.setModal(True)
        
        self.setup_ui()
        
    def setup_ui(self):
        layout = QVBoxLayout()
        
        # Header
        header_label = QLabel("üíÄ X√ÅC NH·∫¨N X√ìA Vƒ®NH VI·ªÑN")
        header_label.setAlignment(Qt.AlignCenter)
        header_font = QFont()
        header_font.setPointSize(16)
        header_font.setBold(True)
        header_label.setFont(header_font)
        header_label.setStyleSheet("color: #dc3545; margin: 10px;")
        layout.addWidget(header_label)
        
        # User info
        info_label = QLabel(f"""
üìã Th√¥ng tin ng∆∞·ªùi d√πng s·∫Ω b·ªã X√ìA Vƒ®NH VI·ªÑN:
üë§ Username: {self.user_info.get('username', 'N/A')}
üë®‚Äçüíº H·ªç t√™n: {self.user_info.get('full_name', 'N/A')}
üé≠ Role: {self.user_info.get('role', 'N/A')}
üìß Email: {self.user_info.get('email', 'N/A')}
        """)
        info_label.setStyleSheet("""
            background-color: #f8d7da;
            border: 2px solid #dc3545;
            border-radius: 8px;
            padding: 15px;
            margin: 10px;
            font-weight: bold;
        """)
        layout.addWidget(info_label)
        
        # Warning box
        warning_label = QLabel("""
üö® C·∫¢NH B√ÅO NGHI√äM TR·ªåNG:

üíÄ NH·ªÆNG G√å S·∫º B·ªä M·∫§T Vƒ®NH VI·ªÑN:
‚Ä¢ To√†n b·ªô th√¥ng tin user
‚Ä¢ M·ªçi d·ªØ li·ªáu li√™n quan

‚ö†Ô∏è THAO T√ÅC N√ÄY KH√îNG TH·ªÇ HO√ÄN T√ÅC!

üí° G·ª¢I √ù: N·∫øu b·∫°n ch·ªâ mu·ªën ngƒÉn user ƒëƒÉng nh·∫≠p,
   h√£y s·ª≠ d·ª•ng n√∫t "üîÑ ƒê·ªïi tr·∫°ng th√°i" thay v√¨ x√≥a.
        """)
        warning_label.setStyleSheet("""
            background-color: #fff3cd;
            border: 2px solid #ffc107;
            border-radius: 8px;
            padding: 15px;
            margin: 10px;
            font-size: 11px;
            line-height: 1.4;
        """)
        layout.addWidget(warning_label)
        
        # Confirmation checkbox or text input
        confirm_label = QLabel("üîê X√ÅC NH·∫¨N X√ìA Vƒ®NH VI·ªÑN:")
        confirm_label.setStyleSheet("font-weight: bold; margin: 10px 0 5px 0;")
        layout.addWidget(confirm_label)
        
        instruction_label = QLabel(f"Nh·∫≠p ch√≠nh x√°c '{self.user_info.get('username', '')}' ƒë·ªÉ x√°c nh·∫≠n:")
        instruction_label.setStyleSheet("margin: 0 0 5px 10px;")
        layout.addWidget(instruction_label)
        
        self.confirm_input = QLineEdit()
        self.confirm_input.setPlaceholderText(f"Nh·∫≠p '{self.user_info.get('username', '')}' ·ªü ƒë√¢y...")
        self.confirm_input.setStyleSheet("""
            QLineEdit {
                border: 2px solid #dc3545;
                border-radius: 6px;
                padding: 8px;
                font-size: 12px;
                margin: 5px 10px;
            }
            QLineEdit:focus {
                border-color: #a71e2a;
                background-color: #fff5f5;
            }
        """)
        self.confirm_input.textChanged.connect(self.check_confirmation)
        layout.addWidget(self.confirm_input)
        
        # Buttons
        button_layout = QHBoxLayout()
        
        # Cancel button
        cancel_btn = QPushButton("‚ùå H·ªßy")
        cancel_btn.setMinimumHeight(45)
        cancel_btn.setStyleSheet("""
            QPushButton {
                background-color: #6c757d;
                color: white;
                border: none;
                border-radius: 8px;
                padding: 10px 20px;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #545b62;
            }
        """)
        cancel_btn.clicked.connect(self.reject)
        button_layout.addWidget(cancel_btn)
        
        # Delete button
        self.delete_btn = QPushButton("üíÄ X√ìA Vƒ®NH VI·ªÑN")
        self.delete_btn.setMinimumHeight(45)
        self.delete_btn.setEnabled(False)
        self.delete_btn.setStyleSheet("""
            QPushButton {
                background-color: #dc3545;
                color: white;
                border: none;
                border-radius: 8px;
                padding: 10px 20px;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover:enabled {
                background-color: #c82333;
            }
            QPushButton:disabled {
                background-color: #6c757d;
                color: #adb5bd;
            }
        """)
        self.delete_btn.clicked.connect(self.confirm_delete)
        button_layout.addWidget(self.delete_btn)
        
        layout.addLayout(button_layout)
        
        self.setLayout(layout)
    
    def check_confirmation(self):
        """Ki·ªÉm tra x√°c nh·∫≠n username"""
        entered_text = self.confirm_input.text().strip()
        expected_username = self.user_info.get('username', '')
        
        if entered_text == expected_username:
            self.delete_btn.setEnabled(True)
            self.confirm_input.setStyleSheet("""
                QLineEdit {
                    border: 2px solid #28a745;
                    border-radius: 6px;
                    padding: 8px;
                    font-size: 12px;
                    margin: 5px 10px;
                    background-color: #f8fff8;
                }
            """)
        else:
            self.delete_btn.setEnabled(False)
            self.confirm_input.setStyleSheet("""
                QLineEdit {
                    border: 2px solid #dc3545;
                    border-radius: 6px;
                    padding: 8px;
                    font-size: 12px;
                    margin: 5px 10px;
                }
                QLineEdit:focus {
                    border-color: #a71e2a;
                    background-color: #fff5f5;
                }
            """)
    
    def confirm_delete(self):
        """X√°c nh·∫≠n cu·ªëi c√πng tr∆∞·ªõc khi x√≥a"""
        final_warning = QMessageBox.critical(
            self,
            "üíÄ X√ÅC NH·∫¨N CU·ªêI C√ôNG",
            f"üö® C·∫¢NH B√ÅO CU·ªêI C√ôNG!\n\n"
            f"B·∫°n TH·ª∞C S·ª∞ mu·ªën X√ìA Vƒ®NH VI·ªÑN user '{self.user_info.get('username', '')}'?\n\n"
            f"üíÄ User s·∫Ω b·ªã x√≥a ho√†n to√†n kh·ªèi database\n"
            f"‚ö†Ô∏è KH√îNG TH·ªÇ HO√ÄN T√ÅC!\n\n"
            f"Nh·∫•n 'Yes' ƒë·ªÉ X√ìA Vƒ®NH VI·ªÑN ngay l·∫≠p t·ª©c.",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if final_warning == QMessageBox.Yes:
            self.confirmed = True
            self.accept()
    
    def is_confirmed(self):
        """Tr·∫£ v·ªÅ True n·∫øu user ƒë√£ x√°c nh·∫≠n x√≥a"""
        return self.confirmed