from PyQt5.QtWidgets import (QWidget, QHeaderView, QTableWidgetItem, QMessageBox, 
                             QDialog, QFileDialog, QAbstractItemView, QPushButton, QHBoxLayout)
from PyQt5.QtCore import Qt, QDateTime
from database.db_manager import db
import os
import hashlib
from datetime import datetime

from ui.pages.case_management_ui import Ui_Form
from ui.pages.create_case_dialog_ui import Ui_CreateCaseDialog
from ui.pages.edit_case_dialog_ui import Ui_EditCaseDialog
from ui.pages.import_evidence_dialog_ui import Ui_ImportEvidenceDialog
from pages_functions.add_evidence_wizard import AddEvidenceWizard

class CreateCaseDialog(QDialog):
    """Dialog ƒë·ªÉ t·∫°o case m·ªõi"""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.ui = Ui_CreateCaseDialog()
        self.ui.setupUi(self)
        self.created_case_id = None  # Store created case ID for workflow
        
        # K·∫øt n·ªëi signals
        self.ui.cancelBtn.clicked.connect(self.reject)
        self.ui.createBtn.clicked.connect(self.create_case)
        self.ui.caseNameEdit.textChanged.connect(self.update_case_path)
        
        # Set initial path
        self.update_case_path("")
    
    def update_case_path(self, case_name):
        """C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n khi t√™n case thay ƒë·ªïi"""
        if case_name.strip():
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            case_name_clean = case_name.replace(" ", "_").replace("/", "_").replace("\\", "_")
            case_folder_name = f"{case_name_clean}_{timestamp}"
            case_path = f"E:/Cases/{case_folder_name}"
            self.ui.casePathEdit.setText(case_path)
        else:
            self.ui.casePathEdit.setText("E:/Cases/[t√™n_case_v·ªõi_timestamp]")
    
    def create_case(self):
        """T·∫°o case m·ªõi"""
        case_name = self.ui.caseNameEdit.text().strip()
        if not case_name:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng nh·∫≠p t√™n case!")
            return
        
        # L·∫•y ƒë∆∞·ªùng d·∫´n t·ª´ UI (ƒë√£ ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông)
        case_folder = self.ui.casePathEdit.text()
        
        try:
            # T·∫°o th∆∞ m·ª•c case n·∫øu ch∆∞a c√≥
            os.makedirs(case_folder, exist_ok=True)
            
            # L∆∞u v√†o database (investigator_id s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c set t·ª´ current_user_id)
            case_data = {
                'title': case_name,
                'desc': f"Case ƒëi·ªÅu tra ph√¢n t√≠ch s·ªë",
                'archive_path': case_folder,
                'status': 'OPEN'
            }
            
            case_id = db.create_case(**case_data)
            
            if case_id:
                self.created_case_id = case_id  # Store for workflow
                
                # ƒê√≥ng create dialog tr∆∞·ªõc
                self.accept()
                
                # Hi·ªÉn th·ªã Add Evidence Wizard tr·ª±c ti·∫øp (kh√¥ng c√≥ dialog trung gian)
                self.show_evidence_wizard_directly(case_id)
            else:
                QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ t·∫°o case. Vui l√≤ng th·ª≠ l·∫°i!")
                
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"L·ªói khi t·∫°o case: {str(e)}")
    
    def show_evidence_wizard_directly(self, case_id):
        """Hi·ªÉn th·ªã Add Evidence Wizard tr·ª±c ti·∫øp sau khi t·∫°o case"""
        from PyQt5.QtCore import QTimer
        
        def show_wizard():
            # Hi·ªÉn th·ªã Add Evidence Wizard tr·ª±c ti·∫øp
            wizard = AddEvidenceWizard(case_id=case_id, parent=self.parent())
            wizard.evidence_added.connect(lambda data: self.on_evidence_added_from_wizard_direct(data))
            wizard.exec_()
        
        # Delay m·ªôt ch√∫t ƒë·ªÉ create dialog ƒë√≥ng ho√†n to√†n
        QTimer.singleShot(100, show_wizard)
        
    def on_evidence_added_from_wizard_direct(self, evidence_data):
        """X·ª≠ l√Ω khi wizard th√™m evidence th√†nh c√¥ng (t·ª´ lu·ªìng t·∫°o case tr·ª±c ti·∫øp)"""
        print(f"Evidence added from direct wizard: {evidence_data}")
        # Refresh case management n·∫øu c·∫ßn
        if hasattr(self.parent(), 'load_cases'):
            self.parent().load_cases()
    
    def show_workflow_options(self, case_name):
        """Hi·ªÉn th·ªã l·ª±a ch·ªçn workflow sau khi t·∫°o case th√†nh c√¥ng"""
        msg = QMessageBox(self)
        msg.setWindowTitle("Add evidence")
        msg.setText(f"Add evidence?")
        #msg.setInformativeText("L·ª±a ch·ªçn?")
        
        # Create custom buttons
        import_btn = msg.addButton("Import Evidence", QMessageBox.AcceptRole)
        if import_btn:
            import_btn.setToolTip("Import evidence c√≥ s·∫µn v√†o case")
        
        collect_btn = msg.addButton("Thu th·∫≠p Evidence", QMessageBox.AcceptRole)  
        if collect_btn:
            collect_btn.setToolTip("Thu th·∫≠p d·ªØ li·ªáu volatile v√† non-volatile")
        
        #later_btn = msg.addButton("‚è≥ ƒê·ªÉ sau", QMessageBox.RejectRole)
        #if later_btn:
        #    later_btn.setToolTip("Quay l·∫°i case management ƒë·ªÉ l√†m vi·ªác kh√°c")
        
        msg.exec_()
        
        if msg.clickedButton() == import_btn:
            self.start_import_workflow()
            return "accept"
        elif msg.clickedButton() == collect_btn:
            self.start_collection_workflow()
            return "accept"
        else:
            return "accept"  # Just close and go back to case management
    
    def start_import_workflow(self):
        """B·∫Øt ƒë·∫ßu workflow import evidence"""
        if not self.created_case_id:
            return
            
        # Show Add Evidence Wizard thay v√¨ import dialog c≈©
        wizard = AddEvidenceWizard(case_id=self.created_case_id, parent=self)
        wizard.evidence_added.connect(self.on_evidence_added_from_wizard)
        if wizard.exec_() == QDialog.Accepted:
            # After successful import, ask about analysis
            self.ask_for_analysis_after_import()
            
    def on_evidence_added_from_wizard(self, evidence_data):
        """X·ª≠ l√Ω khi wizard th√™m evidence th√†nh c√¥ng"""
        print(f"Evidence added from wizard: {evidence_data}")
        # C√≥ th·ªÉ refresh case management n·∫øu c·∫ßn
    
    def start_collection_workflow(self):
        """B·∫Øt ƒë·∫ßu workflow thu th·∫≠p evidence"""
        if not self.created_case_id:
            return
            
        # Find main window to start collection
        main_window = self.find_main_window()
        if main_window:
            # Start with volatile collection first
            QMessageBox.information(
                self,
                "üöÄ B·∫Øt ƒë·∫ßu thu th·∫≠p",
                "üìã Lu·ªìng thu th·∫≠p s·∫Ω b·∫Øt ƒë·∫ßu:\n\n"
                "1Ô∏è‚É£ Thu th·∫≠p d·ªØ li·ªáu Volatile (RAM, processes...)\n"
                "2Ô∏è‚É£ Thu th·∫≠p d·ªØ li·ªáu Non-volatile (disk, files...)\n"
                "3Ô∏è‚É£ T·ª± ƒë·ªông th√™m evidence v√†o case\n"
                "4Ô∏è‚É£ L·ª±a ch·ªçn ph√¢n t√≠ch\n\n"
                "B·∫Øt ƒë·∫ßu v·ªõi Volatile Data..."
            )
            # Store case info for collection workflow - use safer method
            if hasattr(main_window, '__dict__'):
                main_window.__dict__['workflow_case_id'] = self.created_case_id
                main_window.__dict__['workflow_stage'] = "volatile"
            
            if hasattr(main_window, 'switch_to_volatile_tab'):
                main_window.switch_to_volatile_tab(self.created_case_id)
        else:
            QMessageBox.warning(
                self,
                "L·ªói",
                "Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông workflow thu th·∫≠p. Vui l√≤ng s·ª≠ d·ª•ng menu ch√≠nh."
            )
    
    def ask_for_analysis_after_import(self):
        """H·ªèi c√≥ mu·ªën ph√¢n t√≠ch sau khi import xong"""
        reply = QMessageBox.question(
            self,
            "üî¨ Ph√¢n t√≠ch Evidence",
            "‚úÖ Import evidence th√†nh c√¥ng!\n\n"
            "ü§î B·∫°n c√≥ mu·ªën b·∫Øt ƒë·∫ßu ph√¢n t√≠ch ngay kh√¥ng?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.Yes
        )
        
        if reply == QMessageBox.Yes:
            self.start_analysis_workflow()
    
    def start_analysis_workflow(self):
        """B·∫Øt ƒë·∫ßu workflow ph√¢n t√≠ch"""
        if not self.created_case_id:
            return
            
        # Get evidence types from the case to suggest appropriate analysis
        evidence_list = db.get_artifacts_by_case(self.created_case_id)
        
        if not evidence_list:
            QMessageBox.information(
                self,
                "üìã Kh√¥ng c√≥ Evidence",
                "Case n√†y ch∆∞a c√≥ evidence ƒë·ªÉ ph√¢n t√≠ch."
            )
            return
        
        # Suggest analysis types based on evidence
        analysis_suggestions = self.get_analysis_suggestions(evidence_list)
        
        msg = QMessageBox(self)
        msg.setWindowTitle("üî¨ Ch·ªçn lo·∫°i ph√¢n t√≠ch")
        msg.setText("üìä Ch·ªçn lo·∫°i ph√¢n t√≠ch ph√π h·ª£p v·ªõi evidence:")
        msg.setInformativeText(f"üìÅ Case c√≥ {len(evidence_list)} evidence\n{analysis_suggestions}")
        
        # Add analysis buttons based on evidence types
        buttons = {}
        if any("VOLATILE" in e.get('evidence_type', '') for e in evidence_list):
            buttons['memory'] = msg.addButton("üß† Memory Analysis", QMessageBox.AcceptRole)
        
        if any("NON-VOLATILE" in e.get('evidence_type', '') for e in evidence_list):
            buttons['registry'] = msg.addButton("üìù Registry Analysis", QMessageBox.AcceptRole)
            buttons['file'] = msg.addButton("üìÅ File Analysis", QMessageBox.AcceptRole)
            buttons['browser'] = msg.addButton("üåê Browser Analysis", QMessageBox.AcceptRole)
        
        buttons['later'] = msg.addButton("‚è≥ Ph√¢n t√≠ch sau", QMessageBox.RejectRole)
        
        msg.exec_()
        
        # Handle analysis choice
        clicked = msg.clickedButton()
        main_window = self.find_main_window()
        
        if main_window:
            if clicked == buttons.get('memory') and hasattr(main_window, 'memory_btn'):
                main_window.memory_btn.click()
            elif clicked == buttons.get('registry') and hasattr(main_window, 'registry_btn'):
                main_window.registry_btn.click()
            elif clicked == buttons.get('file') and hasattr(main_window, 'file_btn'):
                main_window.file_btn.click()
            elif clicked == buttons.get('browser') and hasattr(main_window, 'browser_btn'):
                main_window.browser_btn.click()
    
    def get_analysis_suggestions(self, evidence_list):
        """ƒê·ªÅ xu·∫•t lo·∫°i ph√¢n t√≠ch d·ª±a tr√™n evidence c√≥ s·∫µn"""
        suggestions = []
        
        volatile_count = sum(1 for e in evidence_list if "VOLATILE" in e.get('evidence_type', ''))
        nonvolatile_count = sum(1 for e in evidence_list if "NON-VOLATILE" in e.get('evidence_type', ''))
        
        if volatile_count > 0:
            suggestions.append(f"üî¥ {volatile_count} Volatile evidence ‚Üí Memory Analysis")
        
        if nonvolatile_count > 0:
            suggestions.append(f"üîµ {nonvolatile_count} Non-volatile evidence ‚Üí File/Registry/Browser Analysis")
        
        return "\n".join(suggestions) if suggestions else "üìã C√°c lo·∫°i ph√¢n t√≠ch c√≥ s·∫µn"
    
    def find_main_window(self):
        """T√¨m main window ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng"""
        widget = self
        while widget:
            parent = widget.parent()
            if parent and hasattr(parent, 'switch_to_volatile_tab'):
                return parent
            if hasattr(widget, 'window') and hasattr(widget.window(), 'switch_to_volatile_tab'):
                return widget.window()
            widget = parent
        return None

class EditCaseDialog(QDialog):
    """Dialog ƒë·ªÉ s·ª≠a case"""
    def __init__(self, case_id, parent=None):
        super().__init__(parent)
        self.ui = Ui_EditCaseDialog()
        self.ui.setupUi(self)
        self.case_id = case_id
        
        # K·∫øt n·ªëi signals
        self.ui.cancelBtn.clicked.connect(self.reject)
        self.ui.saveBtn.clicked.connect(self.save_case)
        
        # Load th√¥ng tin case hi·ªán t·∫°i
        self.load_case_info()
    
    def load_case_info(self):
        """Load th√¥ng tin case hi·ªán t·∫°i"""
        try:
            case = db.get_case_by_id(self.case_id)
            if case:
                self.ui.caseNameEdit.setText(case.get('title', ''))
                self.ui.casePathEdit.setText(case.get('archive_path', ''))
                
                # Set status
                status = case.get('status', 'OPEN')
                index = self.ui.statusCombo.findText(status)
                if index >= 0:
                    self.ui.statusCombo.setCurrentIndex(index)
                    
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ load th√¥ng tin case: {str(e)}")
    
    def save_case(self):
        """L∆∞u thay ƒë·ªïi case"""
        case_name = self.ui.caseNameEdit.text().strip()
        if not case_name:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng nh·∫≠p t√™n case!")
            return
        
        status = self.ui.statusCombo.currentText()
        
        try:
            # C·∫≠p nh·∫≠t case trong database
            case_data = {
                'title': case_name,
                'status': status
            }
            
            if db.update_case(self.case_id, **case_data):
                QMessageBox.information(
                    self,
                    "Th√†nh c√¥ng",
                    f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t case th√†nh c√¥ng!\n\n"
                    f"üìÇ T√™n case: {case_name}\n"
                    f"üìä Tr·∫°ng th√°i: {status}"
                )
                self.accept()
            else:
                QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t case!")
                
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"L·ªói khi c·∫≠p nh·∫≠t case: {str(e)}")

class CreateCaseDialogWithAutoWorkflow(QDialog):
    """Dialog ƒë·ªÉ t·∫°o case m·ªõi v·ªõi workflow t·ª± ƒë·ªông - ch·ªâ hi·ªán Add Evidence sau khi t·∫°o xong"""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.ui = Ui_CreateCaseDialog()
        self.ui.setupUi(self)
        self.created_case_id = None
        
        # K·∫øt n·ªëi signals
        self.ui.cancelBtn.clicked.connect(self.reject)
        self.ui.createBtn.clicked.connect(self.create_case)
        self.ui.caseNameEdit.textChanged.connect(self.update_case_path)
        
        # Set initial path
        self.update_case_path("")
    
    def update_case_path(self, case_name):
        """C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n khi t√™n case thay ƒë·ªïi"""
        if case_name.strip():
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            case_name_clean = case_name.replace(" ", "_").replace("/", "_").replace("\\", "_")
            case_folder_name = f"{case_name_clean}_{timestamp}"
            case_path = f"E:/Cases/{case_folder_name}"
            self.ui.casePathEdit.setText(case_path)
        else:
            self.ui.casePathEdit.setText("E:/Cases/[t√™n_case_v·ªõi_timestamp]")
    
    def create_case(self):
        """T·∫°o case m·ªõi v√† t·ª± ƒë·ªông hi·ªán Add Evidence dialog"""
        case_name = self.ui.caseNameEdit.text().strip()
        if not case_name:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng nh·∫≠p t√™n case!")
            return
        
        case_folder = self.ui.casePathEdit.text()
        
        try:
            # T·∫°o th∆∞ m·ª•c case n·∫øu ch∆∞a c√≥
            os.makedirs(case_folder, exist_ok=True)
            
            # L∆∞u v√†o database
            case_data = {
                'title': case_name,
                'desc': f"Case ƒëi·ªÅu tra ph√¢n t√≠ch s·ªë",
                'archive_path': case_folder,
                'status': 'OPEN'
            }
            
            case_id = db.create_case(**case_data)
            
            if case_id:
                self.created_case_id = case_id
                
                # ƒê√≥ng create case dialog tr∆∞·ªõc
                self.accept()
                
                # Hi·ªÉn th·ªã Add Evidence Wizard tr·ª±c ti·∫øp (b·ªè th√¥ng b√°o v√† dialog nh·ªè)
                self.show_evidence_wizard_directly(case_id)
                
            else:
                QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ t·∫°o case. Vui l√≤ng th·ª≠ l·∫°i!")
                
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"L·ªói khi t·∫°o case: {str(e)}")
    
    def show_add_evidence_dialog(self, case_id):
        """Hi·ªán dialog Add Evidence ngay sau khi t·∫°o case"""
        from PyQt5.QtCore import QTimer
        
        def show_dialog():
            msg = QMessageBox(self.parent())
            msg.setWindowTitle("Add evidence")
            msg.setText("Add evidence?")
            
            # Create custom buttons  
            import_btn = msg.addButton("Import Evidence", QMessageBox.AcceptRole)
            collect_btn = msg.addButton("Thu th·∫≠p Evidence", QMessageBox.AcceptRole)
            
            msg.exec_()
            
            if msg.clickedButton() == import_btn:
                # Show Add Evidence Wizard thay v√¨ import dialog c≈©
                wizard = AddEvidenceWizard(case_id=case_id, parent=self.parent())
                wizard.evidence_added.connect(lambda data: self.on_evidence_added_workflow(data, self.parent()))
                if wizard.exec_() == QDialog.Accepted:
                    # Refresh case management if needed
                    if hasattr(self.parent(), 'load_cases'):
                        self.parent().load_cases()
                        
            elif msg.clickedButton() == collect_btn:
                # Start collection workflow
                self.start_collection_workflow(case_id)
        
        # Delay m·ªôt ch√∫t ƒë·ªÉ create dialog ƒë√≥ng ho√†n to√†n
        QTimer.singleShot(200, show_dialog)
    
    def show_evidence_wizard_directly(self, case_id):
        """Hi·ªÉn th·ªã Add Evidence Wizard tr·ª±c ti·∫øp sau khi t·∫°o case (cho CreateCaseDialogWithAutoWorkflow)"""
        from PyQt5.QtCore import QTimer
        
        def show_wizard():
            # Hi·ªÉn th·ªã Add Evidence Wizard tr·ª±c ti·∫øp
            wizard = AddEvidenceWizard(case_id=case_id, parent=self.parent())
            wizard.evidence_added.connect(lambda data: self.on_evidence_added_workflow_direct(data))
            wizard.exec_()
        
        # Delay m·ªôt ch√∫t ƒë·ªÉ create dialog ƒë√≥ng ho√†n to√†n
        QTimer.singleShot(100, show_wizard)
    
    def on_evidence_added_workflow_direct(self, evidence_data):
        """X·ª≠ l√Ω khi wizard th√™m evidence th√†nh c√¥ng (t·ª´ lu·ªìng workflow tr·ª±c ti·∫øp)"""
        print(f"Evidence added from workflow direct wizard: {evidence_data}")
        # Refresh case management n·∫øu c·∫ßn
        if hasattr(self.parent(), 'load_cases'):
            self.parent().load_cases()
    
    def on_evidence_added_workflow(self, evidence_data, parent_widget):
        """Helper method x·ª≠ l√Ω evidence added t·ª´ wizard"""
        print(f"Evidence added in workflow: {evidence_data}")
        if hasattr(parent_widget, 'load_cases'):
            parent_widget.load_cases()
    
    def start_collection_workflow(self, case_id):
        """B·∫Øt ƒë·∫ßu collection workflow"""
        # Find main window v√† chuy·ªÉn ƒë·∫øn volatile collection
        main_window = self.find_main_window()
        if main_window:
            # Set workflow data
            if hasattr(main_window, 'set_workflow_data'):
                main_window.set_workflow_data(case_id, 'volatile')
            
            # Switch to volatile tab
            if hasattr(main_window, 'switch_to_volatile_tab'):
                main_window.switch_to_volatile_tab(case_id)
    
    def find_main_window(self):
        """T√¨m main window"""
        widget = self.parent()
        while widget:
            if hasattr(widget, 'switch_to_volatile_tab'):
                return widget
            widget = widget.parent() if hasattr(widget, 'parent') else None
        return None

class ImportEvidenceDialog(QDialog):
    """Dialog ƒë·ªÉ import evidence v·ªõi 2 lo·∫°i ch√≠nh: VOLATILE v√† NON-VOLATILE"""
    def __init__(self, case_id, parent=None):
        super().__init__(parent)
        self.ui = Ui_ImportEvidenceDialog()
        self.ui.setupUi(self)
        self.case_id = case_id
        self.selected_files = []  # Initialize for multiple file selection
        
        # K·∫øt n·ªëi signals
        self.ui.cancelBtn.clicked.connect(self.reject)
        self.ui.importBtn.clicked.connect(self.import_evidence)
        self.ui.browseBtn.clicked.connect(self.browse_evidence_files)
        
        # Set default to VOLATILE
        self.ui.volatileRadio.setChecked(True)
        
    def browse_evidence_files(self):
        """Browse v√† ch·ªçn files evidence (lu√¥n cho ph√©p multiple selection)"""
        # Ki·ªÉm tra lo·∫°i evidence ƒë∆∞·ª£c ch·ªçn
        is_volatile = self.ui.volatileRadio.isChecked()
        
        # ƒê·ªãnh nghƒ©a file filter d·ª±a v√†o lo·∫°i evidence
        if is_volatile:
            file_filter = "VOLATILE Data (*.mem *.vmem *.dmp *.raw *.pcap *.pcapng *.txt *.json *.csv *.zip);;Memory Dumps (*.mem *.vmem *.dmp *.raw);;Network (*.pcap *.pcapng);;Text Files (*.txt *.json *.csv);;ZIP Archives (*.zip);;All Files (*)"
            dialog_title = "Ch·ªçn VOLATILE Evidence Files (Ctrl+Click ƒë·ªÉ ch·ªçn nhi·ªÅu files)"
        else:
            file_filter = "NON-VOLATILE Data (*.dd *.e01 *.raw *.img *.001 *.reg *.evtx *.pf);;Disk Images (*.dd *.e01 *.raw *.img *.001);;Registry Files (*.reg *.hiv);;Event Logs (*.evtx);;Prefetch (*.pf);;All Files (*)"
            dialog_title = "Ch·ªçn NON-VOLATILE Evidence Files (Ctrl+Click ƒë·ªÉ ch·ªçn nhi·ªÅu files)"
        
        # Lu√¥n cho ph√©p ch·ªçn multiple files
        files, _ = QFileDialog.getOpenFileNames(
            self,
            dialog_title,
            "",
            file_filter
        )
        
        if files:
            # Hi·ªÉn th·ªã danh s√°ch files ƒë∆∞·ª£c ch·ªçn
            file_list = "\n".join([os.path.basename(f) for f in files])
            if len(files) == 1:
                self.ui.filePathEdit.setText(os.path.basename(files[0]))
            else:
                self.ui.filePathEdit.setText(f"{len(files)} files ƒë∆∞·ª£c ch·ªçn")
            self.ui.filePathEdit.setToolTip(file_list)
            
            # Store full paths for later use
            self.selected_files = files
            
            # Auto-fill t√™n evidence n·∫øu ch∆∞a c√≥
            if not self.ui.evidenceNameEdit.text():
                if len(files) == 1:
                    # S·ª≠ d·ª•ng t√™n file (kh√¥ng c√≥ extension)
                    filename = os.path.splitext(os.path.basename(files[0]))[0]
                    self.ui.evidenceNameEdit.setText(filename)
                else:
                    # T·∫°o t√™n group cho multiple files
                    evidence_type = "VOLATILE" if is_volatile else "NON-VOLATILE"
                    self.ui.evidenceNameEdit.setText(f"{evidence_type} Collection ({len(files)} files)")
    
    def calculate_file_hash(self, file_path):
        """T√≠nh to√°n hash c·ªßa file"""
        hash_md5 = hashlib.md5()
        hash_sha1 = hashlib.sha1()
        hash_sha256 = hashlib.sha256()
        
        try:
            with open(file_path, "rb") as f:
                for chunk in iter(lambda: f.read(4096), b""):
                    hash_md5.update(chunk)
                    hash_sha1.update(chunk)
                    hash_sha256.update(chunk)
                    
            return {
                'md5': hash_md5.hexdigest(),
                'sha1': hash_sha1.hexdigest(),
                'sha256': hash_sha256.hexdigest()
            }
        except Exception as e:
            print(f"Error calculating hash: {e}")
            return None
    
    def calculate_file_hash_with_progress(self, file_path, filename):
        """T√≠nh hash v·ªõi progress dialog cho file l·ªõn"""
        try:
            file_size = os.path.getsize(file_path)
            
            # Create progress dialog
            from PyQt5.QtWidgets import QProgressDialog
            from PyQt5.QtCore import Qt
            progress = QProgressDialog(
                f"Calculating hash for {filename}...",
                "Cancel", 
                0, 
                100, 
                self
            )
            progress.setWindowTitle("Calculating Hash")
            progress.setWindowModality(Qt.WindowModal)
            progress.show()
            
            hash_md5 = hashlib.md5()
            hash_sha1 = hashlib.sha1()
            hash_sha256 = hashlib.sha256()
            bytes_read = 0
            
            with open(file_path, "rb") as f:
                while True:
                    # Check if user cancelled
                    if progress.wasCanceled():
                        progress.close()
                        return None
                        
                    chunk = f.read(1024 * 1024)  # Read 1MB chunks
                    if not chunk:
                        break
                        
                    hash_md5.update(chunk)
                    hash_sha1.update(chunk)
                    hash_sha256.update(chunk)
                    bytes_read += len(chunk)
                    
                    # Update progress
                    progress_value = int((bytes_read / file_size) * 100)
                    progress.setValue(progress_value)
                    
                    # Process events to keep UI responsive
                    from PyQt5.QtWidgets import QApplication
                    QApplication.processEvents()
            
            progress.close()
            return {
                'md5': hash_md5.hexdigest(),
                'sha1': hash_sha1.hexdigest(),
                'sha256': hash_sha256.hexdigest()
            }
            
        except Exception as e:
            print(f"Error calculating hash: {e}")
            if 'progress' in locals():
                progress.close()
            return None
    
    def import_evidence(self):
        """Import evidence v√†o case (single ho·∫∑c multiple files)"""
        # Check if we have files selected
        if not hasattr(self, 'selected_files') or not self.selected_files:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng ch·ªçn file(s) evidence!")
            return
        
        try:
            # X√°c ƒë·ªãnh lo·∫°i evidence
            evidence_type = "VOLATILE" if self.ui.volatileRadio.isChecked() else "NON-VOLATILE"
            
            imported_count = 0
            total_size = 0
            
            # Import t·ª´ng file
            for file_path in self.selected_files:
                if not os.path.exists(file_path):
                    QMessageBox.warning(self, "L·ªói", f"File kh√¥ng t·ªìn t·∫°i: {file_path}")
                    continue
                
                # X√°c ƒë·ªãnh t√™n evidence cho t·ª´ng file
                custom_name = self.ui.evidenceNameEdit.text().strip()
                if custom_name:
                    # N·∫øu user nh·∫≠p t√™n custom
                    if len(self.selected_files) == 1:
                        file_evidence_name = custom_name
                    else:
                        # Multiple files v·ªõi custom name
                        base_name = os.path.splitext(os.path.basename(file_path))[0]
                        file_evidence_name = f"{custom_name} - {base_name}"
                else:
                    # T·ª± ƒë·ªông ƒë·∫∑t t√™n theo file
                    file_evidence_name = os.path.splitext(os.path.basename(file_path))[0]
                
                # L·∫•y th√¥ng tin file
                file_size = os.path.getsize(file_path) if os.path.isfile(file_path) else 0
                total_size += file_size
                
                # T·∫°o evidence trong database
                evidence_data = {
                    'case_id': self.case_id,
                    'evidence_type': evidence_type,
                    'name': file_evidence_name,
                    'source_path': file_path,
                    'size': file_size,
                    'mime_type': self.get_mime_type(file_path)
                }
                
                artefact_id = db.add_artifact(**evidence_data)
                
                if artefact_id and self.ui.calculateHashCheck.isChecked():
                    # T√≠nh hash n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
                    if os.path.isfile(file_path):
                        # Use progress dialog for large files
                        if file_size > 100 * 1024 * 1024:  # > 100MB
                            hashes = self.calculate_file_hash_with_progress(file_path, file_evidence_name)
                        else:
                            hashes = self.calculate_file_hash(file_path)
                        
                        if hashes and 'sha256' in hashes:
                            # Use HashManager to add origin SHA256 hash
                            from database.hash_types import HashManager
                            hash_manager = HashManager(db)
                            hash_manager.add_origin_hash(artefact_id, hashes['sha256'])
                
                imported_count += 1
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£ v√† h·ªèi v·ªÅ ph√¢n t√≠ch
            if imported_count > 0:
                # Accept dialog first
                self.accept()
                
                # Then ask about analysis
                reply = QMessageBox.question(
                    self.parent(),
                    "üî¨ Ph√¢n t√≠ch Evidence",
                    f"‚úÖ Import {imported_count} evidence th√†nh c√¥ng!\n\n"
                    f"üè∑Ô∏è Lo·∫°i: {evidence_type}\n"
                    f"üìä T·ªïng k√≠ch th∆∞·ªõc: {self.format_file_size(total_size)}\n\n"
                    "ü§î B·∫°n c√≥ mu·ªën b·∫Øt ƒë·∫ßu ph√¢n t√≠ch ngay kh√¥ng?",
                    QMessageBox.Yes | QMessageBox.No,
                    QMessageBox.Yes
                )
                
                if reply == QMessageBox.Yes:
                    self.start_analysis_workflow()
            else:
                QMessageBox.warning(self, "L·ªói", "Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c import th√†nh c√¥ng!")
            
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"L·ªói khi import evidence: {str(e)}")
    
    def start_analysis_workflow(self):
        """B·∫Øt ƒë·∫ßu workflow ph√¢n t√≠ch sau khi import"""
        # Get evidence types from the case to suggest appropriate analysis
        evidence_list = db.get_artifacts_by_case(self.case_id)
        
        if not evidence_list:
            return
        
        # Suggest analysis types based on evidence
        analysis_suggestions = self.get_analysis_suggestions(evidence_list)
        
        msg = QMessageBox(self.parent())
        msg.setWindowTitle("üî¨ Ch·ªçn lo·∫°i ph√¢n t√≠ch")
        msg.setText("üìä Ch·ªçn lo·∫°i ph√¢n t√≠ch ph√π h·ª£p v·ªõi evidence:")
        msg.setInformativeText(f"üìÅ Case c√≥ {len(evidence_list)} evidence\n{analysis_suggestions}")
        
        # Add analysis buttons based on evidence types
        buttons = {}
        if any("VOLATILE" in e.get('evidence_type', '') for e in evidence_list):
            buttons['memory'] = msg.addButton("üß† Memory Analysis", QMessageBox.AcceptRole)
        
        if any("NON-VOLATILE" in e.get('evidence_type', '') for e in evidence_list):
            buttons['registry'] = msg.addButton("üìù Registry Analysis", QMessageBox.AcceptRole)
            buttons['file'] = msg.addButton("üìÅ File Analysis", QMessageBox.AcceptRole)
            buttons['browser'] = msg.addButton("üåê Browser Analysis", QMessageBox.AcceptRole)
        
        buttons['later'] = msg.addButton("‚è≥ Ph√¢n t√≠ch sau", QMessageBox.RejectRole)
        
        msg.exec_()
        
        # Handle analysis choice
        clicked = msg.clickedButton()
        main_window = self.find_main_window()
        
        if main_window:
            if clicked == buttons.get('memory') and hasattr(main_window, 'memory_btn'):
                main_window.memory_btn.click()
            elif clicked == buttons.get('registry') and hasattr(main_window, 'registry_btn'):
                main_window.registry_btn.click()
            elif clicked == buttons.get('file') and hasattr(main_window, 'file_btn'):
                main_window.file_btn.click()
            elif clicked == buttons.get('browser') and hasattr(main_window, 'browser_btn'):
                main_window.browser_btn.click()
    
    def get_analysis_suggestions(self, evidence_list):
        """ƒê·ªÅ xu·∫•t lo·∫°i ph√¢n t√≠ch d·ª±a tr√™n evidence c√≥ s·∫µn"""
        suggestions = []
        
        volatile_count = sum(1 for e in evidence_list if "VOLATILE" in e.get('evidence_type', ''))
        nonvolatile_count = sum(1 for e in evidence_list if "NON-VOLATILE" in e.get('evidence_type', ''))
        
        if volatile_count > 0:
            suggestions.append(f"üî¥ {volatile_count} Volatile evidence ‚Üí Memory Analysis")
        
        if nonvolatile_count > 0:
            suggestions.append(f"üîµ {nonvolatile_count} Non-volatile evidence ‚Üí File/Registry/Browser Analysis")
        
        return "\n".join(suggestions) if suggestions else "üìã C√°c lo·∫°i ph√¢n t√≠ch c√≥ s·∫µn"
    
    def find_main_window(self):
        """T√¨m main window ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng"""
        widget = self
        while widget:
            parent = widget.parent()
            if parent and hasattr(parent, 'switch_to_volatile_tab'):
                return parent
            if hasattr(widget, 'window') and hasattr(widget.window(), 'switch_to_volatile_tab'):
                return widget.window()
            widget = parent
        return None
    
    def get_mime_type(self, file_path):
        """X√°c ƒë·ªãnh MIME type c·ªßa file"""
        import mimetypes
        mime_type, _ = mimetypes.guess_type(file_path)
        return mime_type or "application/octet-stream"
    
    def format_file_size(self, size_bytes):
        """Format k√≠ch th∆∞·ªõc file"""
        if size_bytes == 0:
            return "0 B"
        size_names = ["B", "KB", "MB", "GB", "TB"]
        import math
        i = int(math.floor(math.log(size_bytes, 1024)))
        p = math.pow(1024, i)
        s = round(size_bytes / p, 2)
        return f"{s} {size_names[i]}"

class Case(QWidget):
    def __init__(self):
        super(Case, self).__init__()
        self.ui = Ui_Form()
        self.ui.setupUi(self)
        self.current_case_id = None
        
        # Setup tables
        self.setup_tables()
        
        # K·∫øt n·ªëi signals
        self.ui.newCaseBtn.clicked.connect(self.show_create_case_dialog)
        self.ui.refreshBtn.clicked.connect(self.load_cases)
        self.ui.editCaseBtn.clicked.connect(self.edit_selected_case)
        self.ui.deleteCaseBtn.clicked.connect(self.delete_selected_case)
        self.ui.importBtn.clicked.connect(self.show_import_evidence_dialog)
        self.ui.removeEvidenceBtn.clicked.connect(self.remove_evidence)
#        self.ui.collectBtn.clicked.connect(self.show_collect_dialog)
        self.ui.startAnalysisBtn.clicked.connect(self.start_analysis)
        
        # Table events
        self.ui.casesTable.itemSelectionChanged.connect(self.on_case_selected)
        self.ui.searchCaseEdit.textChanged.connect(self.filter_cases)
        
        # Load data
        self.load_cases()
        
    def setup_tables(self):
        """C·∫•u h√¨nh tables"""
        # Cases table
        cases_header = self.ui.casesTable.horizontalHeader()
        cases_header.setSectionResizeMode(QHeaderView.ResizeToContents)
        self.ui.casesTable.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.ui.casesTable.setSelectionMode(QAbstractItemView.SingleSelection)
        
        # B·ªè grid lines v√† c·∫£i thi·ªán appearance
        self.ui.casesTable.setShowGrid(False)
        self.ui.casesTable.setAlternatingRowColors(True)
        
        # Set row height cho table
        self.ui.casesTable.verticalHeader().setDefaultSectionSize(40)
        
        # Evidence table  
        evidence_header = self.ui.evidenceTable.horizontalHeader()
        evidence_header.setSectionResizeMode(QHeaderView.ResizeToContents)
        self.ui.evidenceTable.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.ui.evidenceTable.setSelectionMode(QAbstractItemView.SingleSelection)
        
        # B·ªè grid lines v√† c·∫£i thi·ªán appearance
        self.ui.evidenceTable.setShowGrid(False)
        self.ui.evidenceTable.setAlternatingRowColors(True)
        
    def show_create_case_dialog(self):
        """Hi·ªÉn th·ªã dialog t·∫°o case m·ªõi"""
        dialog = CreateCaseDialog(self)
        if dialog.exec_() == QDialog.Accepted:
            self.load_cases()
    
    def show_create_case_dialog_with_workflow(self):
        """Hi·ªÉn th·ªã dialog t·∫°o case m·ªõi v·ªõi workflow t·ª± ƒë·ªông t·ª´ welcome dialog"""
        dialog = CreateCaseDialogWithAutoWorkflow(self)
        if dialog.exec_() == QDialog.Accepted:
            self.load_cases()
    
    def show_import_evidence_dialog(self):
        """Hi·ªÉn th·ªã Add Evidence Wizard khi ·∫•n n√∫t Add evidence"""
        if not self.current_case_id:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m·ªôt case tr∆∞·ªõc!")
            return
        
        # S·ª≠ d·ª•ng AddEvidenceWizard thay v√¨ ImportEvidenceDialog, truy·ªÅn self (QWidget) l√†m parent
        wizard = AddEvidenceWizard(case_id=self.current_case_id, parent=self)
        wizard.evidence_added.connect(lambda data: self.load_evidence())
        wizard.exec_()
    
    def load_cases(self):
        """Load danh s√°ch cases t·ª´ database"""
        try:
            # L·∫•y t·∫•t c·∫£ cases v·ªõi th√¥ng tin investigator
            all_cases = db.get_cases()
            cases = []
            for case in all_cases:
                case_with_investigator = db.get_case_with_investigator(case['case_id'])
                if case_with_investigator:
                    cases.append(case_with_investigator)
                else:
                    cases.append(case)
            self.ui.casesTable.setRowCount(len(cases))
            
            for row, case in enumerate(cases):
                self.ui.casesTable.setItem(row, 0, QTableWidgetItem(case.get('title', '')))
                
                # Hi·ªÉn th·ªã t√™n investigator thay v√¨ Single/Multi User
                investigator_name = case.get('full_name', 'Ch∆∞a ph√¢n c√¥ng')
                self.ui.casesTable.setItem(row, 1, QTableWidgetItem(investigator_name))
                
                created_at = case.get('created_at', '')
                if created_at:
                    # Format datetime
                    try:
                        dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                        formatted_date = dt.strftime('%d/%m/%Y')
                    except:
                        formatted_date = created_at
                else:
                    formatted_date = ''
                    
                self.ui.casesTable.setItem(row, 2, QTableWidgetItem(formatted_date))
                
                # Count evidence
                evidence_count = len(db.get_artifacts_by_case(case['case_id']))
                self.ui.casesTable.setItem(row, 3, QTableWidgetItem(str(evidence_count)))
                self.ui.casesTable.setItem(row, 4, QTableWidgetItem(case.get('status', '')))
                
                # Hi·ªÉn th·ªã ƒë∆∞·ªùng d·∫´n l∆∞u case
                case_path = case.get('archive_path', 'N/A')
                self.ui.casesTable.setItem(row, 5, QTableWidgetItem(case_path))
                
                # Store case_id in first column
                self.ui.casesTable.item(row, 0).setData(Qt.UserRole, case['case_id'])
                
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ load cases: {str(e)}")
    
    def on_case_selected(self):
        """X·ª≠ l√Ω khi ch·ªçn case"""
        current_row = self.ui.casesTable.currentRow()
        if current_row >= 0:
            item = self.ui.casesTable.item(current_row, 0)
            if item:
                self.current_case_id = item.data(Qt.UserRole)
                case_name = item.text()
                self.ui.noSelectionLabel.setText(f"üìÅ Case hi·ªán t·∫°i: {case_name}")
                self.load_evidence()
        else:
            self.current_case_id = None
            self.ui.noSelectionLabel.setText("üí° Ch·ªçn m·ªôt case t·ª´ danh s√°ch ƒë·ªÉ xem v√† qu·∫£n l√Ω evidence")
            self.ui.evidenceTable.setRowCount(0)
    
    def load_evidence(self):
        """Load evidence c·ªßa case ƒë∆∞·ª£c ch·ªçn"""
        if not self.current_case_id:
            return
            
        try:
            evidence_list = db.get_artifacts_by_case(self.current_case_id)
            self.ui.evidenceTable.setRowCount(len(evidence_list))
            
            for row, evidence in enumerate(evidence_list):
                self.ui.evidenceTable.setItem(row, 0, QTableWidgetItem(evidence.get('name', '')))
                self.ui.evidenceTable.setItem(row, 1, QTableWidgetItem(evidence.get('evidence_type', '')))
                self.ui.evidenceTable.setItem(row, 2, QTableWidgetItem(evidence.get('source_path', '')))
                
                # Format file size
                size = evidence.get('size', 0)
                size_text = self.format_file_size(size) if size else ''
                self.ui.evidenceTable.setItem(row, 3, QTableWidgetItem(size_text))
                
                # Get hash
                hashes = db.get_artefact_hashes(evidence['artefact_id'])
                hash_text = hashes[0]['sha256'][:16] + "..." if hashes else ''
                self.ui.evidenceTable.setItem(row, 4, QTableWidgetItem(hash_text))
                
                # Store evidence_id
                self.ui.evidenceTable.item(row, 0).setData(Qt.UserRole, evidence['artefact_id'])
                
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ load evidence: {str(e)}")
    

    
    def filter_cases(self, text):
        """L·ªçc cases theo text search"""
        for row in range(self.ui.casesTable.rowCount()):
            case_name = self.ui.casesTable.item(row, 0).text()
            match = text.lower() in case_name.lower()
            self.ui.casesTable.setRowHidden(row, not match)
    
    def edit_selected_case(self):
        """S·ª≠a case ƒë∆∞·ª£c ch·ªçn trong table"""
        current_row = self.ui.casesTable.currentRow()
        if current_row < 0:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn case c·∫ßn s·ª≠a!")
            return
            
        item = self.ui.casesTable.item(current_row, 0)
        if item:
            case_id = item.data(Qt.UserRole)
            self.edit_case(case_id)
    
    def edit_case(self, case_id):
        """S·ª≠a case"""
        dialog = EditCaseDialog(case_id, self)
        if dialog.exec_() == QDialog.Accepted:
            self.load_cases()  # Reload danh s√°ch cases ƒë·ªÉ c·∫≠p nh·∫≠t thay ƒë·ªïi
    
    def delete_selected_case(self):
        """X√≥a case ƒë∆∞·ª£c ch·ªçn trong table"""
        current_row = self.ui.casesTable.currentRow()
        if current_row < 0:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn case c·∫ßn x√≥a!")
            return
            
        item = self.ui.casesTable.item(current_row, 0)
        if item:
            case_id = item.data(Qt.UserRole)
            self.delete_case_by_id(case_id)
    
    def delete_case_by_id(self, case_id):
        """X√≥a case theo ID"""
        case = db.get_case_by_id(case_id)
        if not case:
            QMessageBox.warning(self, "L·ªói", "Kh√¥ng t√¨m th·∫•y case!")
            return
            
        reply = QMessageBox.question(
            self, 
            "X√°c nh·∫≠n x√≥a", 
            f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a case '{case['title']}'?\n"
            f"T·∫•t c·∫£ evidence v√† d·ªØ li·ªáu li√™n quan s·∫Ω b·ªã x√≥a!",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            try:
                if db.delete_case(case_id):
                    QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ x√≥a case th√†nh c√¥ng!")
                    # Reset current case if n√≥ l√† case ƒëang ƒë∆∞·ª£c ch·ªçn
                    if self.current_case_id == case_id:
                        self.current_case_id = None
                        self.ui.evidenceTable.setRowCount(0)
                        self.ui.noSelectionLabel.setText("üí° Ch·ªçn m·ªôt case t·ª´ danh s√°ch ƒë·ªÉ xem v√† qu·∫£n l√Ω evidence")
                    self.load_cases()
                else:
                    QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ x√≥a case!")
            except Exception as e:
                QMessageBox.critical(self, "L·ªói", f"L·ªói khi x√≥a case: {str(e)}")
    
    def remove_evidence(self):
        """X√≥a evidence ƒë∆∞·ª£c ch·ªçn"""
        current_row = self.ui.evidenceTable.currentRow()
        if current_row < 0:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn evidence c·∫ßn x√≥a!")
            return
            
        evidence_item = self.ui.evidenceTable.item(current_row, 0)
        evidence_id = evidence_item.data(Qt.UserRole)
        evidence_name = evidence_item.text()
        
        reply = QMessageBox.question(
            self,
            "X√°c nh·∫≠n x√≥a",
            f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a evidence '{evidence_name}'?",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            try:
                if db.delete_artifact(evidence_id):
                    QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ x√≥a evidence th√†nh c√¥ng!")
                    self.load_evidence()
                    self.load_cases()  # Refresh case table ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng evidence
                else:
                    QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ x√≥a evidence!")
            except Exception as e:
                QMessageBox.critical(self, "L·ªói", f"L·ªói khi x√≥a evidence: {str(e)}")
    
    def show_collect_dialog(self):
        """Hi·ªÉn th·ªã dialog ch·ªçn lo·∫°i thu th·∫≠p d·ªØ li·ªáu"""
        if not self.current_case_id:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m·ªôt case tr∆∞·ªõc!")
            return
        
        # T·∫°o dialog ch·ªçn lo·∫°i thu th·∫≠p
        msg = QMessageBox(self)
        msg.setWindowTitle("Thu th·∫≠p d·ªØ li·ªáu")
        msg.setText("üîç Ch·ªçn lo·∫°i d·ªØ li·ªáu c·∫ßn thu th·∫≠p:")
        msg.setInformativeText("D·ªØ li·ªáu Volatile s·∫Ω m·∫•t khi t·∫Øt m√°y, c·∫ßn thu th·∫≠p ngay l·∫≠p t·ª©c.\n"
                              "D·ªØ li·ªáu Non-volatile ƒë∆∞·ª£c l∆∞u tr·ªØ vƒ©nh vi·ªÖn tr√™n ·ªï c·ª©ng.")
        
        volatile_btn = msg.addButton("‚ö° Volatile Data", QMessageBox.AcceptRole)
        nonvolatile_btn = msg.addButton("üíæ Non-volatile Data", QMessageBox.AcceptRole)
        cancel_btn = msg.addButton("H·ªßy", QMessageBox.RejectRole)
        
        msg.exec_()
        
        if msg.clickedButton() == volatile_btn:
            self.show_volatile_collect_dialog()
        elif msg.clickedButton() == nonvolatile_btn:
            self.show_nonvolatile_collect_dialog()
    
    def show_volatile_collect_dialog(self):
        """Chuy·ªÉn sang tab thu th·∫≠p d·ªØ li·ªáu volatile"""
        # T√¨m main window v√† chuy·ªÉn sang tab volatile
        main_window = self.find_main_window()
        if main_window:
            # Truy·ªÅn database case_id (ID th·ª±c) thay v√¨ case_code
            main_window.switch_to_volatile_tab(self.current_case_id)
        else:
            QMessageBox.information(
                self,
                "Th√¥ng b√°o", 
                "Vui l√≤ng s·ª≠ d·ª•ng tab 'Volatile' trong menu ch√≠nh ƒë·ªÉ thu th·∫≠p d·ªØ li·ªáu."
            )
    
    def find_main_window(self):
        """T√¨m main window"""
        widget = self
        while widget:
            parent = widget.parent()
            if parent and hasattr(parent, 'switch_to_volatile_tab'):
                return parent
            if hasattr(widget, 'window') and hasattr(widget.window(), 'switch_to_volatile_tab'):
                return widget.window()
            widget = parent
        return None
    
    def show_nonvolatile_collect_dialog(self):
        """Chuy·ªÉn sang tab thu th·∫≠p d·ªØ li·ªáu non-volatile"""
        # T√¨m main window v√† chuy·ªÉn sang tab nonvolatile
        main_window = self.find_main_window()
        if main_window:
            # Simulate click tr√™n nonvolatile button
            if hasattr(main_window, 'nonvolatile_btn'):
                main_window.nonvolatile_btn.click()
        else:
            QMessageBox.information(
                self,
                "Th√¥ng b√°o", 
                "Vui l√≤ng s·ª≠ d·ª•ng tab 'Non-Volatile' trong menu ch√≠nh ƒë·ªÉ thu th·∫≠p d·ªØ li·ªáu."
            )
    
    def start_analysis(self):
        """B·∫Øt ƒë·∫ßu ph√¢n t√≠ch"""
        if not self.current_case_id:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn case ƒë·ªÉ ph√¢n t√≠ch!")
            return
            
        evidence_count = self.ui.evidenceTable.rowCount()
        if evidence_count == 0:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Case n√†y ch∆∞a c√≥ evidence n√†o ƒë·ªÉ ph√¢n t√≠ch!")
            return
            
        QMessageBox.information(
            self,
            "B·∫Øt ƒë·∫ßu ph√¢n t√≠ch",
            f"üöÄ S·∫µn s√†ng ph√¢n t√≠ch case v·ªõi {evidence_count} evidence!\n\n"
            "B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c module ph√¢n t√≠ch:\n"
            "‚Ä¢ Memory Analysis\n"
            "‚Ä¢ Registry Analysis\n"
            "‚Ä¢ Browser Analysis\n"
            "‚Ä¢ File Analysis\n"
            "‚Ä¢ Metadata Analysis\n"
            "‚Ä¢ Event Log Analysis\n\n"
            "H√£y chuy·ªÉn ƒë·∫øn c√°c tab ph√¢n t√≠ch t∆∞∆°ng ·ª©ng."
        )
    
    def format_file_size(self, size_bytes):
        """Format k√≠ch th∆∞·ªõc file"""
        if size_bytes == 0:
            return "0 B"
        size_names = ["B", "KB", "MB", "GB", "TB"]
        import math
        i = int(math.floor(math.log(size_bytes, 1024)))
        p = math.pow(1024, i)
        s = round(size_bytes / p, 2)
        return f"{s} {size_names[i]}"
